/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FundManager {
  export type Fund_tStruct = {
    fID: BigNumberish;
    owner: AddressLike;
    date_created: BigNumberish;
    end_of_phase: BigNumberish[];
    phase_goal: BigNumberish[];
    no_phase: BigNumberish;
    status: BigNumberish;
    current_value: BigNumberish[];
    current_phase: BigNumberish;
    extended: boolean;
    deadline_poc: BigNumberish;
  };

  export type Fund_tStructOutput = [
    fID: bigint,
    owner: string,
    date_created: bigint,
    end_of_phase: bigint[],
    phase_goal: bigint[],
    no_phase: bigint,
    status: bigint,
    current_value: bigint[],
    current_phase: bigint,
    extended: boolean,
    deadline_poc: bigint
  ] & {
    fID: bigint;
    owner: string;
    date_created: bigint;
    end_of_phase: bigint[];
    phase_goal: bigint[];
    no_phase: bigint;
    status: bigint;
    current_value: bigint[];
    current_phase: bigint;
    extended: boolean;
    deadline_poc: bigint;
  };

  export type DonorEntryStruct = {
    donor: AddressLike;
    amount: BigNumberish;
    phase: BigNumberish;
  };

  export type DonorEntryStructOutput = [
    donor: string,
    amount: bigint,
    phase: bigint
  ] & { donor: string; amount: bigint; phase: bigint };
}

export interface FundManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AddFund"
      | "Donate"
      | "ExtendDay"
      | "GetFund"
      | "GetPlan"
      | "GetState"
      | "GetSubmitter"
      | "Refund"
      | "Withdraw"
      | "donors"
      | "fundExist"
      | "fundOf"
      | "funds"
      | "no_funds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddFuncSuccess"
      | "DonateSuccess"
      | "RefundSuccess"
      | "SubmitPOCSuccess"
      | "WithdrawSucess"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AddFund",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "Donate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ExtendDay",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "GetFund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GetPlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GetState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GetSubmitter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "Refund",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "Withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donors",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundExist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "funds", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "no_funds", values?: undefined): string;

  decodeFunctionResult(functionFragment: "AddFund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ExtendDay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GetFund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GetPlan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GetState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GetSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundExist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "funds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "no_funds", data: BytesLike): Result;
}

export namespace AddFuncSuccessEvent {
  export type InputTuple = [
    fid: BigNumberish,
    owner: AddressLike,
    created: BigNumberish
  ];
  export type OutputTuple = [fid: bigint, owner: string, created: bigint];
  export interface OutputObject {
    fid: bigint;
    owner: string;
    created: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DonateSuccessEvent {
  export type InputTuple = [
    fid: BigNumberish,
    sender: AddressLike,
    value: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    fid: bigint,
    sender: string,
    value: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    fid: bigint;
    sender: string;
    value: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundSuccessEvent {
  export type InputTuple = [
    fid: BigNumberish,
    phase: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [fid: bigint, phase: bigint, timestamp: bigint];
  export interface OutputObject {
    fid: bigint;
    phase: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitPOCSuccessEvent {
  export type InputTuple = [
    fid: BigNumberish,
    phase: BigNumberish,
    owner: AddressLike,
    arg3: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    fid: bigint,
    phase: bigint,
    owner: string,
    arg3: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    fid: bigint;
    phase: bigint;
    owner: string;
    arg3: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawSucessEvent {
  export type InputTuple = [
    fid: BigNumberish,
    phase: BigNumberish,
    owner: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    fid: bigint,
    phase: bigint,
    owner: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    fid: bigint;
    phase: bigint;
    owner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FundManager extends BaseContract {
  connect(runner?: ContractRunner | null): FundManager;
  waitForDeployment(): Promise<this>;

  interface: FundManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AddFund: TypedContractMethod<
    [
      fid: BigNumberish,
      end_of_phase_: BigNumberish[],
      phase_goal_: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  Donate: TypedContractMethod<[fid: BigNumberish], [void], "payable">;

  ExtendDay: TypedContractMethod<
    [fid: BigNumberish, new_phase_dl: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  GetFund: TypedContractMethod<
    [fid: BigNumberish],
    [FundManager.Fund_tStructOutput],
    "view"
  >;

  GetPlan: TypedContractMethod<[fid: BigNumberish], [bigint[]], "view">;

  GetState: TypedContractMethod<[fid: BigNumberish], [bigint], "view">;

  GetSubmitter: TypedContractMethod<
    [fid: BigNumberish],
    [FundManager.DonorEntryStructOutput[]],
    "view"
  >;

  Refund: TypedContractMethod<
    [fid: BigNumberish, phase: BigNumberish],
    [void],
    "nonpayable"
  >;

  Withdraw: TypedContractMethod<
    [fid: BigNumberish, phase: BigNumberish],
    [void],
    "nonpayable"
  >;

  donors: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint] & {
        donor: string;
        amount: bigint;
        phase: bigint;
      }
    ],
    "view"
  >;

  fundExist: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  fundOf: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, boolean, bigint] & {
        fID: bigint;
        owner: string;
        date_created: bigint;
        no_phase: bigint;
        status: bigint;
        current_phase: bigint;
        extended: boolean;
        deadline_poc: bigint;
      }
    ],
    "view"
  >;

  funds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, boolean, bigint] & {
        fID: bigint;
        owner: string;
        date_created: bigint;
        no_phase: bigint;
        status: bigint;
        current_phase: bigint;
        extended: boolean;
        deadline_poc: bigint;
      }
    ],
    "view"
  >;

  no_funds: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AddFund"
  ): TypedContractMethod<
    [
      fid: BigNumberish,
      end_of_phase_: BigNumberish[],
      phase_goal_: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Donate"
  ): TypedContractMethod<[fid: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "ExtendDay"
  ): TypedContractMethod<
    [fid: BigNumberish, new_phase_dl: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "GetFund"
  ): TypedContractMethod<
    [fid: BigNumberish],
    [FundManager.Fund_tStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "GetPlan"
  ): TypedContractMethod<[fid: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "GetState"
  ): TypedContractMethod<[fid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "GetSubmitter"
  ): TypedContractMethod<
    [fid: BigNumberish],
    [FundManager.DonorEntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "Refund"
  ): TypedContractMethod<
    [fid: BigNumberish, phase: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Withdraw"
  ): TypedContractMethod<
    [fid: BigNumberish, phase: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donors"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint] & {
        donor: string;
        amount: bigint;
        phase: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fundExist"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "fundOf"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, boolean, bigint] & {
        fID: bigint;
        owner: string;
        date_created: bigint;
        no_phase: bigint;
        status: bigint;
        current_phase: bigint;
        extended: boolean;
        deadline_poc: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "funds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, boolean, bigint] & {
        fID: bigint;
        owner: string;
        date_created: bigint;
        no_phase: bigint;
        status: bigint;
        current_phase: bigint;
        extended: boolean;
        deadline_poc: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "no_funds"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AddFuncSuccess"
  ): TypedContractEvent<
    AddFuncSuccessEvent.InputTuple,
    AddFuncSuccessEvent.OutputTuple,
    AddFuncSuccessEvent.OutputObject
  >;
  getEvent(
    key: "DonateSuccess"
  ): TypedContractEvent<
    DonateSuccessEvent.InputTuple,
    DonateSuccessEvent.OutputTuple,
    DonateSuccessEvent.OutputObject
  >;
  getEvent(
    key: "RefundSuccess"
  ): TypedContractEvent<
    RefundSuccessEvent.InputTuple,
    RefundSuccessEvent.OutputTuple,
    RefundSuccessEvent.OutputObject
  >;
  getEvent(
    key: "SubmitPOCSuccess"
  ): TypedContractEvent<
    SubmitPOCSuccessEvent.InputTuple,
    SubmitPOCSuccessEvent.OutputTuple,
    SubmitPOCSuccessEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawSucess"
  ): TypedContractEvent<
    WithdrawSucessEvent.InputTuple,
    WithdrawSucessEvent.OutputTuple,
    WithdrawSucessEvent.OutputObject
  >;

  filters: {
    "AddFuncSuccess(uint256,address,uint256)": TypedContractEvent<
      AddFuncSuccessEvent.InputTuple,
      AddFuncSuccessEvent.OutputTuple,
      AddFuncSuccessEvent.OutputObject
    >;
    AddFuncSuccess: TypedContractEvent<
      AddFuncSuccessEvent.InputTuple,
      AddFuncSuccessEvent.OutputTuple,
      AddFuncSuccessEvent.OutputObject
    >;

    "DonateSuccess(uint256,address,uint256,uint256)": TypedContractEvent<
      DonateSuccessEvent.InputTuple,
      DonateSuccessEvent.OutputTuple,
      DonateSuccessEvent.OutputObject
    >;
    DonateSuccess: TypedContractEvent<
      DonateSuccessEvent.InputTuple,
      DonateSuccessEvent.OutputTuple,
      DonateSuccessEvent.OutputObject
    >;

    "RefundSuccess(uint256,uint256,uint256)": TypedContractEvent<
      RefundSuccessEvent.InputTuple,
      RefundSuccessEvent.OutputTuple,
      RefundSuccessEvent.OutputObject
    >;
    RefundSuccess: TypedContractEvent<
      RefundSuccessEvent.InputTuple,
      RefundSuccessEvent.OutputTuple,
      RefundSuccessEvent.OutputObject
    >;

    "SubmitPOCSuccess(uint256,uint256,address,uint256,uint256)": TypedContractEvent<
      SubmitPOCSuccessEvent.InputTuple,
      SubmitPOCSuccessEvent.OutputTuple,
      SubmitPOCSuccessEvent.OutputObject
    >;
    SubmitPOCSuccess: TypedContractEvent<
      SubmitPOCSuccessEvent.InputTuple,
      SubmitPOCSuccessEvent.OutputTuple,
      SubmitPOCSuccessEvent.OutputObject
    >;

    "WithdrawSucess(uint256,uint256,address,uint256)": TypedContractEvent<
      WithdrawSucessEvent.InputTuple,
      WithdrawSucessEvent.OutputTuple,
      WithdrawSucessEvent.OutputObject
    >;
    WithdrawSucess: TypedContractEvent<
      WithdrawSucessEvent.InputTuple,
      WithdrawSucessEvent.OutputTuple,
      WithdrawSucessEvent.OutputObject
    >;
  };
}
